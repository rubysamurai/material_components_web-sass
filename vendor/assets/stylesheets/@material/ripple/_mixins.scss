//
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

@import "@material/animation/variables";
@import "@material/theme/variables";
@import "./keyframes";

// Ensure that styles needed by any component using MDC Ripple are emitted, but only once.
// (Every component using MDC Ripple imports these mixins, but doesn't necessarily import mdc-ripple.scss.)

// This variable is not intended to be overridden externally; it uses !default to avoid being reset
// every time this file is imported.
$mdc-ripple-common-styles-emitted_: false !default;

@if not $mdc-ripple-common-styles-emitted_ {
  $mdc-ripple-common-styles-emitted_: true;

  @include mdc-ripple-keyframes_;

  // Styles used to detect buggy behavior of CSS custom properties in Edge.
  // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/
  // This is included in _mixins.scss rather than mdc-ripple.scss so that it will be
  // present for other components which rely on ripple as well as mdc-ripple itself.
  .mdc-ripple-surface--test-edge-var-bug {
    --mdc-ripple-surface-test-edge-var: 1px solid #000;

    visibility: hidden;

    &::before {
      border: var(--mdc-ripple-surface-test-edge-var);
    }
  }
}

@mixin mdc-ripple-surface() {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;

  will-change: transform, opacity;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);

  &::before,
  &::after {
    position: absolute;
    transition: opacity 250ms linear;
    border-radius: 50%;
    pointer-events: none;
    content: "";
  }
}

@mixin mdc-ripple-color($color: black, $opacity: .06) {
  // Opacity styles are here (rather than in mdc-ripple-surface) to ensure that opacity is re-initialized for
  // cases where this mixin is used to override another inherited use of itself,
  // without needing to re-include mdc-ripple-surface.
  &::before,
  &::after {
    @include mdc-ripple-color_($color, $opacity);

    opacity: 0;
  }

  // Note: when :active is applied, :focus is already applied, which will effectively double the effect.
  &:not(.mdc-ripple-upgraded) {
    &:hover::before,
    &:focus::before,
    &:active::after {
      transition-duration: 85ms;
      opacity: .6;
    }
  }

  &.mdc-ripple-upgraded--background-focused::before {
    opacity: .99999;
  }

  &.mdc-ripple-upgraded--background-active-fill::before {
    transition-duration: 120ms;
    opacity: 1;
  }

  // Foreground ripple styles

  &.mdc-ripple-upgraded::after {
    opacity: 0;
  }

  &.mdc-ripple-upgraded--foreground-activation::after {
    animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
  }

  &.mdc-ripple-upgraded--foreground-deactivation::after {
    animation: 83ms mdc-ripple-fg-opacity-out;
    // Retain transform from mdc-ripple-fg-radius-in activation
    transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
  }
}

@mixin mdc-ripple-radius($radius: 100%) {
  &::before,
  &::after {
    top: calc(50% - #{$radius});
    left: calc(50% - #{$radius});
    width: $radius * 2;
    height: $radius * 2;
  }

  // Background ripple styles

  &.mdc-ripple-upgraded::before {
    top: calc(50% - #{$radius});
    left: calc(50% - #{$radius});
    width: $radius * 2;
    height: $radius * 2;
    transform: scale(var(--mdc-ripple-fg-scale, 0));
  }

  &.mdc-ripple-upgraded--unbounded::before {
    top: var(--mdc-ripple-top, calc(50% - #{$radius / 2}));
    left: var(--mdc-ripple-left, calc(50% - #{$radius / 2}));
    width: var(--mdc-ripple-fg-size, $radius);
    height: var(--mdc-ripple-fg-size, $radius);
    transform: scale(var(--mdc-ripple-fg-scale, 0));
  }

  // Foreground ripple styles
  &.mdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    width: var(--mdc-ripple-fg-size, $radius);
    height: var(--mdc-ripple-fg-size, $radius);
    transform: scale(0);
    transform-origin: center center;
  }

  &.mdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0);
  }
}

@mixin mdc-ripple-color_($color, $opacity) {
  // stylelint-disable at-rule-empty-line-before, block-closing-brace-newline-after
  @if type-of($color) == "color" {
    background-color: rgba($color, $opacity);
  } @else {
    // Assume $color is a theme property name
    $theme-value: map-get($mdc-theme-property-values, $color);
    $css-var: var(--mdc-theme-#{$color}, $theme-value);

    background-color: rgba($theme-value, $opacity);

    // See: https://drafts.csswg.org/css-color/#modifying-colors
    // While this is currently unsupported as of now, it will begin to work by default as browsers
    // begin to implement the CSS 4 color spec.
    @supports (background-color: color(green a(10%))) {
      background-color: color(#{$css-var} a(#{percentage($opacity)}));
    }
  }
  // stylelint-enable at-rule-empty-line-before, block-closing-brace-newline-after
}
