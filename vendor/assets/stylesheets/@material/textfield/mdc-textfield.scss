//
// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

@import "./mixins";
@import "./variables";
@import "@material/animation/variables";
@import "@material/ripple/mixins";
@import "@material/rtl/mixins";
@import "@material/theme/variables";
@import "@material/theme/mixins";
@import "@material/typography/mixins";
@import "@material/typography/variables";

@function mdc-textfield-transition($property) {
  @return #{$property} 180ms $mdc-animation-standard-curve-timing-function;
}

@include mdc-text-field-invalid-label-shake_keyframes_(standard, 100%);
@include mdc-text-field-invalid-label-shake_keyframes_(box, 50%);

// postcss-bem-linter: define textfield
.mdc-textfield {
  display: inline-block;
  position: relative;
  margin-bottom: 8px;
  will-change: opacity, transform, color;

  &__input {
    @include mdc-theme-prop(color, text-primary-on-light);
    @include mdc-typography-base;
    // We use only a subset of the MDC typography values here as changing things such as line-height
    // affects how the labels are transformed.
    // TODO: Re-add setting the font-size from mdc-typography-styles (currently
    // setting it here has no effect because it is overriden by the font-size
    // given below).
    @each $prop in (letter-spacing) {
      #{$prop}: map-get(map-get($mdc-typography-styles, subheading2), $prop);
    }

    width: 100%;
    padding: 0 0 8px;
    transition: mdc-textfield-transition(opacity);
    border: none;
    border-bottom: 1px solid $mdc-textfield-underline-on-light-idle;
    background: none;
    font-size: inherit;
    appearance: none;

    &::placeholder {
      @include mdc-theme-prop(color, text-hint-on-light);

      transition: mdc-textfield-transition(color);
      opacity: 1;
    }

    &:hover {
      border-color: $mdc-textfield-underline-on-light;
    }

    &:focus {
      outline: none;

      &::placeholder {
        @include mdc-theme-prop(color, $mdc-textfield-light-placeholder);
      }
    }

    // Remove red outline on firefox
    &:invalid {
      box-shadow: none;
    }

    @include mdc-theme-dark {
      @include mdc-theme-prop(color, text-primary-on-dark);

      border-bottom: 1px solid $mdc-textfield-underline-on-dark-idle;

      &:hover {
        border-bottom: 1px solid $mdc-textfield-underline-on-dark;
      }

      &::placeholder {
        @include mdc-theme-prop(color, text-hint-on-dark);
      }

      &:focus::placeholder {
        @include mdc-theme-prop(color, $mdc-textfield-dark-placeholder);
      }
    }
  }

  &__bottom-line {
    @include mdc-theme-prop(background-color, primary);

    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    transform: scaleX(0);
    transition: mdc-textfield-transition(transform), mdc-textfield-transition(opacity);
    opacity: 0;
    z-index: 2;
  }

  &__bottom-line--active {
    transform: scaleX(1);
  }

  .mdc-textfield__input:focus ~ .mdc-textfield__bottom-line {
    opacity: 1;
  }

  &__label {
    position: absolute;
    bottom: 8px;
    left: 0;
    transform-origin: left top;
    transition: mdc-textfield-transition(transform), mdc-textfield-transition(color);
    color: $mdc-textfield-underline-on-light-idle;
    cursor: text;

    // stylelint-disable plugin/selector-bem-pattern
    @include mdc-rtl(".mdc-textfield") {
      right: 0;
      left: auto;
      transform-origin: right top;
    }
    // stylelint-enable plugin/selector-bem-pattern

    @include mdc-theme-dark(".mdc-textfield") {
      @include mdc-theme-prop(color, $mdc-textfield-dark-label);
    }

    &--float-above {
      transform: translateY(-100%) scale(.75, .75);
      cursor: auto;
    }
  }
}

// Move label when textfield gets autofilled in Chrome
.mdc-textfield__input {
  // stylelint-disable plugin/selector-bem-pattern
  &:-webkit-autofill + .mdc-textfield__label {
    transform: translateY(-100%) scale(.75, .75);
    cursor: auto;
  }
  // stylelint-enable plugin/selector-bem-pattern
}

.mdc-textfield--box {
  @include mdc-ripple-surface;
  @include mdc-ripple-color(black, .04);
  @include mdc-ripple-radius;
  @include mdc-text-field-box-corner-radius($mdc-text-field-border-radius);

  display: inline-flex;
  position: relative;
  height: 56px;
  background-color: $mdc-textfield-box-background;
  overflow: hidden;

  @include mdc-theme-dark(".mdc-textfield", true) {
    background-color: $mdc-textfield-box-background-dark;
  }

  @include mdc-theme-dark(".mdc-textfield", true) {
    @include mdc-ripple-color(white, .05);
  }

  // NOTE: For some reason, stylelint complains that the patterns below don't follow BEM.
  // However, it seems to emit the wrong selector for that pattern. Thus, we disable it above where
  // we would normally disable it (on combined selectors) as a workaround.

  // stylelint-disable plugin/selector-bem-pattern
  .mdc-textfield__input {
    align-self: flex-end;
    box-sizing: border-box;
    height: 100%;
    padding: 20px 16px 0;
  }

  .mdc-textfield__label {
    @include mdc-rtl-reflexive-position(left, 16px);

    position: absolute;
    bottom: 20px;
    width: calc(100% - #{$mdc-textfield-icon-padding});
    color: $mdc-textfield-box-secondary-text;
    text-overflow: ellipsis;
    white-space: nowrap;
    pointer-events: none;
    overflow: hidden;
    // Force the label into its own layer to prevent to prevent visible layer promotion adjustments
    // when the ripple is activated behind it.
    will-change: transform;

    @include mdc-theme-dark(".mdc-textfield") {
      @include mdc-theme-prop(color, text-secondary-on-dark);
    }

    &--float-above {
      transform: translateY(-50%) scale(.75, .75);
    }
  }

  .mdc-textfield__label--float-above {
    &.mdc-textfield__label--shake {
      animation: invalid-shake-float-above-box 250ms 1;
    }
  }

  &.mdc-textfield--disabled {
    @include mdc-theme-prop(color, $mdc-textfield-light-placeholder);

    border-bottom: none;
    background-color: $mdc-textfield-box-disabled-background;

    @include mdc-theme-dark(".mdc-textfield", true) {
      @include mdc-theme-prop(background-color, $mdc-textfield-dark-background);
      @include mdc-theme-prop(color, $mdc-textfield-dark-placeholder);

      border-bottom: none;
    }

    .mdc-textfield__label {
      bottom: 20px;
    }

    .mdc-textfield__icon {
      @include mdc-theme-prop(color, $mdc-textfield-disabled-icon-on-light);

      @include mdc-theme-dark() {
        @include mdc-theme-prop(color, $mdc-textfield-disabled-icon-on-dark);
      }
    }
  }

  &.mdc-textfield--dense {
    .mdc-textfield__input {
      padding: 12px 12px 0;
    }

    .mdc-textfield__label {
      @include mdc-rtl-reflexive-position(left, 12px);

      bottom: 20px;

      &--float-above {
        transform: translateY(calc(-75% - 2px)) scale(.923, .923);
      }
    }
  }
  // stylelint-enable plugin/selector-bem-pattern
}

.mdc-textfield--with-leading-icon .mdc-textfield__icon,
.mdc-textfield--with-trailing-icon .mdc-textfield__icon {
  position: absolute;
  bottom: 16px;
  cursor: pointer;

  @include mdc-theme-dark(".mdc-textfield") {
    @include mdc-theme-prop(color, text-secondary-on-dark);
  }
}

.mdc-textfield--with-leading-icon {
  .mdc-textfield__input {
    @include mdc-rtl-reflexive-property(padding, $mdc-textfield-icon-padding, $mdc-textfield-icon-position);
  }

  .mdc-textfield__icon {
    @include mdc-rtl-reflexive-position(left, $mdc-textfield-icon-position);
  }

  .mdc-textfield__label {
    @include mdc-rtl-reflexive-position(left, $mdc-textfield-icon-padding);
  }
}

.mdc-textfield--with-trailing-icon {
  .mdc-textfield__input {
    @include mdc-rtl-reflexive-property(padding, $mdc-textfield-icon-position, $mdc-textfield-icon-padding);
  }

  .mdc-textfield__icon {
    @include mdc-rtl-reflexive-position(right, $mdc-textfield-icon-position);
  }
}

.mdc-textfield__icon:not([tabindex]),
.mdc-textfield__icon[tabindex="-1"] {
  cursor: default;
  pointer-events: none;
}

// stylelint-disable plugin/selector-bem-pattern
.mdc-textfield--with-leading-icon.mdc-textfield--dense .mdc-textfield__icon,
.mdc-textfield--with-trailing-icon.mdc-textfield--dense .mdc-textfield__icon {
  bottom: 16px;
  transform: scale(.8);
}

.mdc-textfield--with-leading-icon.mdc-textfield--dense {
  .mdc-textfield__input {
    @include mdc-rtl-reflexive-property(padding, $mdc-textfield-dense-icon-padding, $mdc-textfield-dense-icon-position);
  }

  .mdc-textfield__icon {
    @include mdc-rtl-reflexive-position(left, $mdc-textfield-dense-icon-position);
  }

  .mdc-textfield__label {
    @include mdc-rtl-reflexive-position(left, $mdc-textfield-dense-icon-padding);
  }
}

.mdc-textfield--with-trailing-icon.mdc-textfield--dense {
  .mdc-textfield__input {
    @include mdc-rtl-reflexive-property(padding, $mdc-textfield-dense-icon-position, $mdc-textfield-dense-icon-padding);
  }

  .mdc-textfield__icon {
    @include mdc-rtl-reflexive-position(right, $mdc-textfield-dense-icon-position);
  }
}
// stylelint-enable plugin/selector-bem-pattern

.mdc-textfield--upgraded:not(.mdc-textfield--fullwidth):not(.mdc-textfield--box) {
  display: inline-flex;
  position: relative;
  align-items: flex-end;
  box-sizing: border-box;
  margin-top: 16px;

  &:not(.mdc-textfield--textarea) {
    height: 48px;
  }

  .mdc-textfield__label {
    pointer-events: none;
  }
}

.mdc-textfield--invalid {
  .mdc-textfield__label {
    color: $mdc-textfield-error-on-light;
  }

  .mdc-textfield__input {
    border-color: $mdc-textfield-error-on-light;
  }

  .mdc-textfield__bottom-line {
    background-color: $mdc-textfield-error-on-light;
  }
}

// stylelint-disable plugin/selector-bem-pattern
.mdc-textfield--invalid.mdc-textfield--textarea {
  border-color: $mdc-textfield-error-on-light;
}

.mdc-textfield__label--float-above {
  &.mdc-textfield__label--shake {
    animation: invalid-shake-float-above-standard 250ms 1;
  }
}
// stylelint-enable plugin/selector-bem-pattern

.mdc-textfield--dense {
  margin-top: 12px;
  margin-bottom: 4px;
  font-size: .813rem;

  .mdc-textfield__label--float-above {
    // NOTE: This is an eyeball'd approximation of what's in the mocks.
    transform: translateY(calc(-100% - 2px)) scale(.923, .923);
  }
}

.mdc-textfield--disabled {
  pointer-events: none;

  .mdc-textfield__input {
    border-bottom: 1px dotted $mdc-textfield-disabled-border-on-light;

    @include mdc-theme-dark(".mdc-textfield", true) {
      border-bottom: 1px dotted $mdc-textfield-disabled-border-on-dark;
    }
  }

  // stylelint-disable plugin/selector-bem-pattern
  .mdc-textfield__input,
  .mdc-textfield__label,
  + .mdc-textfield-helptext {
    @include mdc-theme-prop(color, text-disabled-on-light);
  }
  // stylelint-enable plugin/selector-bem-pattern

  .mdc-textfield__input,
  .mdc-textfield__label {
    @include mdc-theme-dark(".mdc-textfield") {
      @include mdc-theme-prop(color, text-disabled-on-dark);
    }
  }

  @include mdc-theme-dark(".mdc-textfield", true) {
    // stylelint-disable plugin/selector-bem-pattern
    + .mdc-textfield-helptext {
      @include mdc-theme-prop(color, text-disabled-on-dark);
    }
    // stylelint-enable plugin/selector-bem-pattern
  }

  .mdc-textfield__label {
    bottom: 8px;
    cursor: default;
  }
}

.mdc-textfield--invalid.mdc-textfield--disabled {
  .mdc-textfield__label {
    @include mdc-theme-prop(color, text-disabled-on-light);

    @include mdc-theme-dark(".mdc-textfield") {
      @include mdc-theme-prop(color, text-disabled-on-dark);
    }
  }
}

.mdc-textfield__input:required + .mdc-textfield__label::after {
  margin-left: 1px;
  content: "*";

  .mdc-textfield--focused & {
    color: $mdc-textfield-error-on-light;

    @include mdc-theme-dark(".mdc-textfield", true) {
      color: $mdc-textfield-error-on-dark;
    }
  }
}

.mdc-textfield--textarea {
  @include mdc-text-field-textarea-corner-radius($mdc-text-field-border-radius);

  $padding-inset: 16px;
  $label-offset-y: $padding-inset + 2;
  $label-offset-x: $padding-inset;

  display: flex;
  height: initial;
  transition: none;
  border: 1px solid $mdc-textarea-border-on-light;
  overflow: hidden;

  @include mdc-theme-dark(".mdc-textfield") {
    border-color: $mdc-textarea-border-on-dark;
  }

  // stylelint-disable plugin/selector-bem-pattern
  .mdc-textfield__input {
    padding: $padding-inset;
    padding-top: $padding-inset * 2;
    border: 1px solid transparent;

    &:focus {
      @include mdc-theme-prop(border-color, primary);
    }

    &:invalid:not(:focus) {
      border-color: $mdc-textfield-error-on-light;
    }

    @include mdc-theme-dark(".mdc-textfield") {
      &:hover {
        border-bottom-color: transparent;
      }

      &:focus {
        @include mdc-theme-prop(border-color, secondary);
      }

      &:invalid:not(:focus) {
        border-color: $mdc-textfield-error-on-dark;
      }
    }
  }

  .mdc-textfield__label {
    @include mdc-rtl-reflexive-position(left, 1px);

    top: $label-offset-y;
    bottom: auto;
    padding: 8px 16px;
    background-color: $mdc-textarea-light-background;

    @include mdc-theme-dark(".mdc-textfield") {
      background-color: $mdc-textarea-dark-background;
    }

    &--float-above {
      // Translate above the top of the input, and compensate for the amount of offset needed
      // to position the label within the bounds of the inset padding.
      // Note that the scale factor is an eyeball'd approximation of what's shown in the mocks.
      transform: translateY(-50%) scale(.923, .923);
    }
  }

  &.mdc-textfield--disabled {
    border-style: solid;
    border-color: $mdc-textfield-disabled-border-on-light;
    background-color: $mdc-textarea-disabled-background-on-light;

    @include mdc-theme-dark(".mdc-textfield") {
      border-color: $mdc-textfield-disabled-border-on-dark;
      background-color: $mdc-textarea-disabled-background-on-dark;
    }

    .mdc-textfield__label {
      background-color: $mdc-textarea-disabled-background-on-light;

      @include mdc-theme-dark(".mdc-textfield") {
        background-color: $mdc-textarea-disabled-background-on-dark;
      }
    }
  }

  &:not(.mdc-textfield--upgraded) {
    .mdc-textfield__input {
      padding-top: $padding-inset;
    }
  }
}

.mdc-textfield--textarea.mdc-textfield--focused {
  @include mdc-theme-prop(border-color, primary);
}

// stylelint-enable plugin/selector-bem-pattern

.mdc-textfield--fullwidth {
  width: 100%;

  // stylelint-disable plugin/selector-bem-pattern

  &:not(.mdc-textfield--textarea) {
    display: block;
    box-sizing: border-box;
    height: 56px;
    margin: 0;
    border: none;
    border-bottom: 1px solid $mdc-textfield-divider-on-light;
    outline: none;

    .mdc-textfield__input {
      width: 100%;
      height: 100%;
      padding: 0;
      resize: none;
      // Use !important here to override all other border treatments
      border: none !important;
    }
  }

  @include mdc-theme-dark {
    border-bottom: 1px solid $mdc-textfield-divider-on-dark;
  }

  // stylelint-enable plugin/selector-bem-pattern
}

// Graceful degredation for css-only inputs

.mdc-textfield {
  &:not(.mdc-textfield--upgraded):not(.mdc-textfield--textarea) .mdc-textfield__input {
    transition: mdc-textfield-transition(border-bottom-color);
    border-bottom: 1px solid $mdc-textfield-divider-on-light;
  }

  &:not(.mdc-textfield--upgraded) .mdc-textfield__input {
    &:focus {
      @include mdc-theme-prop(border-color, primary);
    }

    &:disabled {
      @include mdc-theme-prop(color, $mdc-textfield-dark-placeholder);

      border-bottom-style: dotted;
    }

    // stylelint-disable selector-max-specificity
    &:invalid:not(:focus) {
      border-color: $mdc-textfield-error-on-light;
    }
    // stylelint-enable selector-max-specificity
  }

  @include mdc-theme-dark {
    &:not(.mdc-textfield--upgraded) .mdc-textfield__input {
      &:not(:focus) {
        border-color: rgba(white, .12);
      }

      &:disabled {
        @include mdc-theme-prop(color, $mdc-textfield-dark-placeholder);

        border-color: $mdc-textfield-disabled-border-on-dark;
        background-color: $mdc-textarea-disabled-background-on-dark;
      }

      // stylelint-disable selector-max-specificity
      &:invalid:not(:focus) {
        border-color: $mdc-textfield-error-on-dark;
      }
      // stylelint-enable selector-max-specificity
    }
  }
}

.mdc-textfield--box:not(.mdc-textfield--upgraded) {
  height: 56px;

  &::before,
  &::after {
    border-radius: 0;
  }

  .mdc-textfield__input {
    padding-top: 0;
  }
}

// postcss-bem-linter: end

// postcss-bem-linter: define textfield-helptext

.mdc-textfield-helptext {
  @include mdc-theme-prop(color, text-hint-on-light);

  margin: 0;
  transition: mdc-textfield-transition(opacity);
  opacity: 0;
  font-size: .75rem;
  will-change: opacity;

  @include mdc-theme-dark {
    @include mdc-theme-prop(color, text-hint-on-dark);
  }

  // stylelint-disable plugin/selector-bem-pattern
  .mdc-textfield + & {
    margin-bottom: 8px;
  }

  .mdc-textfield--dense + & {
    margin-bottom: 4px;
  }

  .mdc-textfield--focused + &:not(#{&}--validation-msg) {
    opacity: 1;
  }

  .mdc-textfield--box + & {
    margin-right: 16px;
    margin-left: 16px;
  }

  // stylelint-enable plugin/selector-bem-pattern
}

.mdc-textfield-helptext--persistent {
  transition: none;
  opacity: 1;
  will-change: initial;
}

// postcss-bem-linter: end

.mdc-textfield--invalid {
  + .mdc-textfield-helptext--validation-msg {
    opacity: 1;
    color: $mdc-textfield-error-on-light;
  }

  @include mdc-theme-dark(".mdc-textfield", true) {
    + .mdc-textfield-helptext--validation-msg {
      color: $mdc-textfield-error-on-dark;
    }
  }
}

// mdc-form-field tweaks to align text field label correctly
// stylelint-disable selector-max-type
.mdc-form-field > .mdc-textfield + label {
  align-self: flex-start;
}
// stylelint-enable selector-max-type
